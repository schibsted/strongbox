/*
 * Copyright 2016 Schibsted Products & Technology AS. Licensed under the terms of the MIT license. See LICENSE in the project root.
 */

import static java.lang.System.getenv

apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'

group = projectGroup
version = getenv('TRAVIS_TAG') ? getenv('TRAVIS_TAG') : "0.0.1";

dependencies {
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    compile "com.amazonaws:aws-java-sdk-core:$awsVersion"
    compile "com.amazonaws:aws-java-sdk-dynamodb:$awsVersion"
    compile "com.amazonaws:aws-java-sdk-kms:$awsVersion"
    compile "com.amazonaws:aws-java-sdk-iam:$awsVersion"
    compile "com.amazonaws:aws-java-sdk-sts:$awsVersion"
    compile "com.amazonaws:aws-encryption-sdk-java:$awsEncryptionVersion"

    compile "com.google.guava:guava:$guavaVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"

    testCompile "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
    testCompile ("org.testng:testng:$testngVersion") {
        exclude module : 'junit'
    }
    testCompile "org.mockito:mockito-core:$mockitoVersion"
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output

        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
    }

    useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
   sourceSets sourceSets.main
   executionData integrationTest
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

shadowJar {
    baseName = project.name + '-shadow'
    classifier = ''
}

tasks.withType(Jar) {
    from(project.parent.projectDir) {
        include 'LICENSE', 'NOTICE'
        into 'META-INF'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'strongbox-' + project.name
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
            pom.withXml {
                asNode().with {
                    appendNode('name', 'Strongbox SDK')
                    appendNode('description', 'A secret management solution')
                    appendNode('url', 'https://github.com/schibsted/strongbox')
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'MIT')
                            appendNode('url', 'https://github.com/schibsted/strongbox/blob/master/LICENSE')
                        }
                    }
                }
            }
        }
        shaded(MavenPublication) {
            artifactId = 'strongbox-' + project.name + '-shaded'
            from components.shadow
        }
    }
}

javadoc {
    exclude("**/internal/**")
}

bintray {
    user = getenv('BINTRAY_USER')
    key = getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    pkg {
        repo = 'strongbox-maven'
        name = 'strongbox-sdk'
        userOrg = 'strongbox'
        licenses = ['MIT']
        websiteUrl = 'https://github.com/schibsted/strongbox'
        issueTrackerUrl = 'https://github.com/schibsted/strongbox/issues'
        vcsUrl = 'https://github.com/schibsted/strongbox.git'
        publicDownloadNumbers = false
    }
}
